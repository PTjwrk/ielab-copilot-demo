import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from io import StringIO
import datetime

st.set_page_config(page_title="IE Lab Copilot MVP", page_icon="üß†", layout="wide")

st.title("üß† IE Lab Copilot ‚Äì MVP Prototype")
st.markdown("‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏ö Sand-Casting: **‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Äì ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‚Äì ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‚Äì ‡∏£‡∏±‡∏ö Feedback**")

# --- SECTION 1 : DATA CAPTURE FORM ---
st.header("1Ô∏è‚É£ Data Capture Form")

with st.form("lab_form"):
    team = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°")
    date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á", datetime.date.today())
    sand_moisture = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏≤‡∏¢ (%)", 2.0, 8.0, 5.0)
    melt_temp = st.slider("‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏´‡∏•‡∏≠‡∏° (¬∞C)", 600, 900, 750)
    gating_ratio = st.selectbox("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô Gating : Riser", ["1:1", "2:1", "3:1", "Custom"])
    defect = st.multiselect("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Defect ‡∏ó‡∏µ‡πà‡∏û‡∏ö", ["Porosity", "Misrun", "Cold Shut", "Shrinkage", "None"])
    notes = st.text_area("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    submitted = st.form_submit_button("üì• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

if "data" not in st.session_state:
    st.session_state.data = pd.DataFrame(columns=["Team", "Date", "Moisture", "Temp", "Ratio", "Defect", "Notes"])

if submitted:
    new_row = {
        "Team": team,
        "Date": date,
        "Moisture": sand_moisture,
        "Temp": melt_temp,
        "Ratio": gating_ratio,
        "Defect": ", ".join(defect) if defect else "None",
        "Notes": notes
    }
    st.session_state.data = pd.concat([st.session_state.data, pd.DataFrame([new_row])], ignore_index=True)
    st.success("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß")

# --- SECTION 2 : DASHBOARD ---
st.header("2Ô∏è‚É£ Dashboard & Summary")
if len(st.session_state.data) > 0:
    df = st.session_state.data
    st.dataframe(df)
    fig = px.scatter(df, x="Moisture", y="Temp", color="Defect",
                     title="Moisture vs Temperature by Defect Type",
                     hover_data=["Team", "Notes"])
    st.plotly_chart(fig, use_container_width=True)
    defect_counts = df["Defect"].value_counts()
    st.bar_chart(defect_counts)
else:
    st.info("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π Dashboard")

# --- SECTION 3 : AUTO REPORT ---
st.header("3Ô∏è‚É£ Auto-Generated Lab Report")
if len(st.session_state.data) > 0:
    latest = df.iloc[-1]
    report = f"""
### üß© Auto Summary for Team {latest['Team']}
- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {latest['Date']}
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏≤‡∏¢: {latest['Moisture']}%
- ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏´‡∏•‡∏≠‡∏°: {latest['Temp']} ¬∞C
- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô Gating:Riser: {latest['Ratio']}
- Defect ‡∏ó‡∏µ‡πà‡∏û‡∏ö: {latest['Defect']}
- ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {latest['Notes']}

**‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö:**  
‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô {latest['Moisture']}% ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ {latest['Temp']}¬∞C ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ sand-casting.  
‡∏´‡∏≤‡∏Å‡∏û‡∏ö Defect ‡∏ä‡∏ô‡∏¥‡∏î {latest['Defect']} ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô Gating ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏´‡∏•‡∏≠‡∏°‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ.
    """
    st.markdown(report)
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")

# --- SECTION 4 : FEEDBACK & CONFUSION MATRIX ---
st.header("4Ô∏è‚É£ Feedback & Evaluation")

with st.form("feedback_form"):
    satisfaction = st.slider("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö (1 = ‡πÅ‡∏¢‡πà, 5 = ‡∏î‡∏µ‡∏°‡∏≤‡∏Å)", 1, 5, 4)
    expect_match = st.radio("‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏´‡∏°?", ["‡πÉ‡∏ä‡πà", "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"])
    result_good = st.radio("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°?", ["‡πÉ‡∏ä‡πà", "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"])
    fb_submit = st.form_submit_button("üì§ ‡∏™‡πà‡∏á Feedback")

if "fb_data" not in st.session_state:
    st.session_state.fb_data = pd.DataFrame(columns=["Satisfaction", "Expect", "Result"])

if fb_submit:
    st.session_state.fb_data = pd.concat([
        st.session_state.fb_data,
        pd.DataFrame([{
            "Satisfaction": satisfaction,
            "Expect": expect_match,
            "Result": result_good
        }])
    ], ignore_index=True)
    st.success("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Feedback!")

if len(st.session_state.fb_data) > 0:
    fb = st.session_state.fb_data
    st.write("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Feedback ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
    st.dataframe(fb)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Confusion Matrix
    matrix = pd.crosstab(fb["Expect"], fb["Result"],
                         rownames=["Expectation"], colnames=["Outcome"])
    st.write("### Confusion Matrix")
    st.dataframe(matrix)

    tp = len(fb[(fb["Expect"]=="‡πÉ‡∏ä‡πà") & (fb["Result"]=="‡πÉ‡∏ä‡πà")])
    tn = len(fb[(fb["Expect"]=="‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà") & (fb["Result"]=="‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà")])
    fp = len(fb[(fb["Expect"]=="‡πÉ‡∏ä‡πà") & (fb["Result"]=="‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà")])
    fn = len(fb[(fb["Expect"]=="‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà") & (fb["Result"]=="‡πÉ‡∏ä‡πà")])
    total = tp+tn+fp+fn
    acc = (tp+tn)/total if total>0 else 0
    prec = tp/(tp+fp) if (tp+fp)>0 else 0
    rec = tp/(tp+fn) if (tp+fn)>0 else 0

    st.markdown(f"""
    **üìà ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Confusion Matrix**
    - True Positive (TP): {tp}
    - True Negative (TN): {tn}
    - False Positive (FP): {fp}
    - False Negative (FN): {fn}
    - Accuracy: **{acc:.2f}**
    - Precision: **{prec:.2f}**
    - Recall: **{rec:.2f}**
    """)
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Feedback ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Matrix")
